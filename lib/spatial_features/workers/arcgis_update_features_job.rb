class ArcGISUpdateFeaturesJob < Struct.new(:options)
  def perform
    model = options[:spatial_model_type].find(options[:spatial_model_id])

    if model.update_features!
      options[:cache_classes].each {|klass| SpatialFeatures.cache_record_proximity(model, klass) }
    end
  rescue => e
    raise "Can't refresh geometry: #{normalize_message(e.message)}"
  end

  private

  def normalize_message(message)
    if message =~ /\Agetaddrinfo/
      "ArcGIS Server is not responding."
    elsif message =~ /invalid KML representation/
      invalid_kml_reason(message) || "invalid KML being generated by ArcGIS."
    elsif message =~ /Self-intersection/
      message.scan(/\[(\d+(?:\.\d+)?) (\d+(?:\.\d+)?)\]/).each do |lng, lat|
        "Self-intersection at #{lng},#{lat}"
      end.join(', ')
    else
      message
    end
  end

  NUMBER_REGEX = /-?\d+\.\d+/
  COORDINATE_REGEX = /<LinearRing><coordinates>\s*((?:#{NUMBER_REGEX},#{NUMBER_REGEX},#{NUMBER_REGEX}\s*)+)<\/coordinates><\/LinearRing>/
  def invalid_kml_reason(message)
    message.scan(COORDINATE_REGEX) do |match|
      coords = match[0].split(/(?:,0\.0+)?\s+/).chunk {|c| c }.map(&:first)

      return "KML ring doesn't have enough points #{coords.first}" if coords.length < 4
    end

    return nil
  end
end
